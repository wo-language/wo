package main

import (
	"errors"
	"fmt"
	"os"
)

func main_bang() {
	//_, err := errFunc(true)
	//if err != nil {
	//	fmt.Println(err)
	//}

	//errVar := errors.New("Error errVar")

	var f, err = os.Open("bang.wo")

	defer func(f *os.File) {
		err := f.Close()
		if err != nil {
			fmt.Println(err)
		}
	}(f)

	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(f)

	//n := !errFunc(true)
	// _ := !booler() // different meaning
	// _ := !!booler() // different meaning
	//_, err := (!errFuncRef())(true)
	// a.b.c!()
	// b.c!()
	// c!()
	// d!

}

type errable struct {
	a   []interface{}
	err error
}

func booler() bool { return false }

func errFunc(willErr bool) (int, error) {
	if willErr {
		return 5, errors.New("test error")
	} else {
		return 0, nil
	}
}

func justErr() error {
	return errors.New("1 err")
}

func errFuncRef() func(bool) (int, error) {
	return errFunc
}
